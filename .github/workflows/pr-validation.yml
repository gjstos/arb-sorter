name: üîç PR Validation - ARB Sorter

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üü¢ Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: üì¶ Instalar depend√™ncias
        run: yarn install --immutable

      - name: üîç Linting
        id: lint
        continue-on-error: true
        run: |
          echo "üîç Executando linting..."
          yarn lint
          echo "‚úÖ Linting passou!"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: üß™ Executar testes
        id: test
        continue-on-error: true
        run: |
          echo "üß™ Executando testes..."
          yarn test
          echo "‚úÖ Todos os testes passaram!"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: üì¶ Build da extens√£o
        id: build
        continue-on-error: true
        run: |
          echo "üì¶ Fazendo build da extens√£o..."
          npx vsce package --no-yarn
          echo "‚úÖ Build conclu√≠do com sucesso!"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: üîç Validar estrutura do projeto
        id: structure
        continue-on-error: true
        run: |
          echo "üîç Validando estrutura do projeto..."

          # Verificar se arquivos essenciais existem
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json n√£o encontrado"
            exit 1
          fi

          if [ ! -f "src/extension.js" ]; then
            echo "‚ùå src/extension.js n√£o encontrado"
            exit 1
          fi

          if [ ! -f "README.md" ]; then
            echo "‚ùå README.md n√£o encontrado"
            exit 1
          fi

          echo "‚úÖ Estrutura do projeto v√°lida!"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: üìã Verificar package.json
        id: package
        continue-on-error: true
        run: |
          echo "üìã Validando package.json..."

          # Verificar se a vers√£o √© v√°lida
          VERSION=$(node -p "require('./package.json').version")
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
            echo "‚ùå Vers√£o inv√°lida no package.json: $VERSION"
            exit 1
          fi

          # Verificar se campos obrigat√≥rios existem
          if [ -z "$(node -p "require('./package.json').name")" ]; then
            echo "‚ùå Campo 'name' n√£o encontrado no package.json"
            exit 1
          fi

          if [ -z "$(node -p "require('./package.json').displayName")" ]; then
            echo "‚ùå Campo 'displayName' n√£o encontrado no package.json"
            exit 1
          fi

          echo "‚úÖ package.json v√°lido!"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: üéØ Resumo da valida√ß√£o
        run: |
          echo "üéØ Resumo da valida√ß√£o do PR:"
          echo "=================================="

          # Linting
          if [ "${{ steps.lint.outputs.status }}" = "success" ]; then
            echo "‚úÖ Linting: PASSOU"
            LINT_STATUS=true
          else
            echo "‚ùå Linting: FALHOU"
            LINT_STATUS=false
          fi

          # Testes
          if [ "${{ steps.test.outputs.status }}" = "success" ]; then
            echo "‚úÖ Testes: PASSOU"
            TEST_STATUS=true
          else
            echo "‚ùå Testes: FALHOU"
            TEST_STATUS=false
          fi

          # Build
          if [ "${{ steps.build.outputs.status }}" = "success" ]; then
            echo "‚úÖ Build: PASSOU"
            BUILD_STATUS=true
          else
            echo "‚ùå Build: FALHOU"
            BUILD_STATUS=false
          fi

          # Estrutura
          if [ "${{ steps.structure.outputs.status }}" = "success" ]; then
            echo "‚úÖ Estrutura: PASSOU"
            STRUCTURE_STATUS=true
          else
            echo "‚ùå Estrutura: FALHOU"
            STRUCTURE_STATUS=false
          fi

          # Package.json
          if [ "${{ steps.package.outputs.status }}" = "success" ]; then
            echo "‚úÖ Package.json: PASSOU"
            PACKAGE_STATUS=true
          else
            echo "‚ùå Package.json: FALHOU"
            PACKAGE_STATUS=false
          fi

          echo "=================================="

          # Verificar se todos passaram
          if [ "$LINT_STATUS" = true ] && \
             [ "$TEST_STATUS" = true ] && \
             [ "$BUILD_STATUS" = true ] && \
             [ "$STRUCTURE_STATUS" = true ] && \
             [ "$PACKAGE_STATUS" = true ]; then
            echo "üöÄ PR est√° pronto para merge!"
          else
            echo "‚ö†Ô∏è  PR precisa de corre√ß√µes antes do merge."
            exit 1
          fi
